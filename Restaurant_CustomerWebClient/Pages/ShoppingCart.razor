@page "/shoppingcart"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Restaurant_CustomerWebClient.Data

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage BrowserStorage
@inject NotificationService NotificationService

<RadzenCard class="d-flex justify-content-center align-content-center mx-auto p-4" 
    Style="color:black; background-color:rebeccapurple; width:fit-content; border:none; border-radius:20px;">
    
    @if (Cart == null)
    {
        <RadzenCard>
            <h4 class="mb-4">Loading...</h4>
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </RadzenCard>
    }
    else
    {
        if(Cart.Foods.Count == 0)
        {
            <RadzenLabel class="m-4 p-4" Style="width:fit-content; font-size:xx-large; border-radius: 10px" 
                Text="A bevásárlókosár üres..."></RadzenLabel>
        }
        else
        {
            @foreach (var food in Cart.Foods)
            {
                <RadzenCard Style="color:black">
                    <h2 style="font-size:xx-large; font-weight:600;">@food.Name</h2>
                </RadzenCard>
            }
            <h1>@Cart.Order.Price</h1>

            <RadzenButton Text="Megrendelés" Click="@SubmitOrder" class="m-4 p-2" Style="font-size: x-large; width: fit-content; border-radius: 20px" />
        
            <OrderNumber Number="@OrderNumber" />
        }
    }    
</RadzenCard>

@code {

    public double PriceSummary { get; set; }
    public ShoppingCartModel Cart { get; set; } 
    public int OrderNumber { get; set; }

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await BrowserStorage.GetAsync<ShoppingCartModel>("Cart");
        Cart = result.Success ? result.Value : new ShoppingCartModel();
    }

    private async Task DeleteProduct(int productId)
    {
        foreach(var food in Cart.Foods)
        {
            if (food.Id == productId)
            {
                Cart.Foods.Remove(food);
                BrowserStorage.SetAsync("Cart", Cart);
            }
        }

        NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Sikeres törlés!",
            Detail = $"A termék törlölve!",
            Duration = 6000
        });
    }

    private async Task SubmitOrder()
    {
        // add order
        await HttpClient.PostAsJsonAsync("order", Cart.Order);

        // add ordered foods
        foreach(var food in Cart.Foods)
        {
            await HttpClient.PostAsJsonAsync("food/ordered", new OrderItem(food.Id, Cart.Order.Id, 1));
            NavigationManager.NavigateTo("/");
        }

        OrderNumber = Cart.Order.Id;
    }

}

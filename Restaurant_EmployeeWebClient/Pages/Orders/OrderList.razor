@page "/order/list"

@using Radzen

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<RadzenCard class="d-flex flex-column" Style="column-count:2">
    <h1>Rendelések lista</h1>
    @if(OrderModelList == null)
    {
        <RadzenCard>
            <h2>Loading...</h2>
        </RadzenCard>
    }
    else
    {
        @foreach(var order in OrderModelList)
        {
            <RadzenCard class="d-flex flex-column p-4 m-2" style="background-color:lightgrey; font-size:x-large; border-radius: 40px; width:fit-content; height:fit-content">
                <div class="d-flex flex-row" style="gap: .8rem">
                    <RadzenBadge Style="background-color:white; color:black; border-radius: 50%; width:fit-content; height:fit-content; font-size:xx-large">@order.Order.Id</RadzenBadge>
                    <div class="mt-2" style="width:fit-content; height:fit-content;">@order.Order.CreatedDate.ToShortTimeString() (@order.Order.CreatedDate.ToShortDateString())</div>
                    
                    <EditForm Model="@order.Order" OnValidSubmit="@(() => SaveChangedStatus(order.Order))" class="mt-2 d-flex flex-row" style="gap: 0.8rem">
                        <InputSelect class="form-control" @bind-Value="@order.Order.Status" style="width: fit-content; height: fit-content">
                            @foreach (var orderStatus in OrderStatusList)
                            {
                                <option value="@orderStatus">@orderStatus</option>
                            }
                        </InputSelect>
                        <button type="submit" class="btn btn-primary" style="width:fit-content; height:fit-content">Mentés</button>
                    </EditForm>
                </div>

                <RadzenCard class="m-2 mx-auto" Style="width:fit-content; border-radius:30px; color:black;">
                    @foreach(var food in order.Foods)
                    {
                        <div style="font-size:x-large">@food.Name (@food.Price Ft)</div>
                    }
                </RadzenCard>
                <RadzenCard class="mx-auto p-0 px-4" style="font-size:xx-large; border-radius: 30px; height:fit-content; width:fit-content">Összesen: @order.Order.Price Ft</RadzenCard>

            </RadzenCard>
        }
    }
</RadzenCard>


@code {

    public List<Order> Orders { get; set; }
    public List<ShoppingCartModel> OrderModelList { get; set; } = new List<ShoppingCartModel>();
    public List<OrderStatus> OrderStatusList = Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>().ToList();

    protected override async Task OnInitializedAsync()
    {

        Orders = await HttpClient.GetFromJsonAsync<List<Order>>("order");

        foreach(var order in Orders)
        {
            ShoppingCartModel orderModel = new ShoppingCartModel();
            var allOrdersFromDb = await HttpClient.GetFromJsonAsync<List<OrderItem>>("food/ordered");
            var allFoodsFromDb = await HttpClient.GetFromJsonAsync<List<Food>>("food");

            orderModel.Order = order;
            var orderedFoods = allOrdersFromDb.Where(x => x.OrderId == order.Id).ToList();

            foreach(var orderedFood in orderedFoods)
            {
                var food = await HttpClient.GetFromJsonAsync<Food>($"food/{orderedFood.FoodId}");
                orderModel.Foods.Add(food);
            }

            OrderModelList.Add(orderModel);
        }
    }

    private async void SaveChangedStatus(Order order)
    {
        await HttpClient.PutAsJsonAsync($"order/{order.Id}", order);
        NavigationManager.NavigateTo("/order/list");
    }
}

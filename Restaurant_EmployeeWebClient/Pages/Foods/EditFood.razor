@page "/food/{FoodId}/edit"

@using Radzen

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

@if (Food == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FoodForm ButtonTitle="Szerkesztés" SubmitForm="@EditingFood" 
        Food="@Food" CompTitle="Étel szerkesztése"></FoodForm>
    <button type="button" class="btn btn-danger mt-2" 
        @onclick="@DeleteFood">Delete</button>
}

@code{

    [Parameter]
    public string FoodId { get; set; }

    public Food Food { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Food = await HttpClient.GetFromJsonAsync<Food>($"food/{FoodId}");

        NotificationService.Notify(new NotificationMessage
            {
            Style = "position: absolute; left:100px",
            Severity = NotificationSeverity.Success,
            Summary = "Sikeres szerkesztés!",
            Detail = $"A(z) adatai megváltoztak!",
            Duration = 10000
        });
    }

    private async Task EditingFood()
    {
        await HttpClient.PutAsJsonAsync($"food/{FoodId}", Food);
        NavigationManager.NavigateTo($"food/list");

        NotificationService.Notify(new NotificationMessage
            {
            Style = "position: absolute; left:100px",
            Severity = NotificationSeverity.Success,
            Summary = "Sikeres szerkesztés!",
            Detail = $"A(z) {Food.Name} adatai megváltoztak!",
            Duration = 5000
        });
    }

    private async Task DeleteFood()
    {
        await HttpClient.DeleteAsync($"food/{FoodId}");
        NavigationManager.NavigateTo("food/list");
    }

}